import { Assembly } from '@jsii/spec';
import { PackageInfo, TestWorkspace } from 'jsii';
import { SnippetTranslator, SnippetLocation } from '../lib';
export declare type MultipleSources = {
    [key: string]: string;
    'index.ts': string;
};
export interface TestJsiiModuleOptions {
    /**
     * Whether or not to compress the assembly
     */
    readonly compressAssembly?: boolean;
}
/**
 * Compile a jsii module from source, and produce an environment in which it is available as a module
 */
export declare class TestJsiiModule {
    readonly assembly: Assembly;
    readonly workspace: TestWorkspace;
    private readonly compressAssembly;
    static fromSource(source: string | MultipleSources, packageInfo: Partial<PackageInfo> & {
        name: string;
        main?: string;
        types?: string;
    }, options?: TestJsiiModuleOptions): TestJsiiModule;
    readonly moduleDirectory: string;
    readonly workspaceDirectory: string;
    private constructor();
    /**
     * Make a snippet translator for the given source w.r.t this compiled assembly
     */
    successfullyCompile(source: string): SnippetTranslator;
    translateHere(source: string): import("../lib").TranslatedSnippet;
    /**
     * Update the file to reflect the latest changes to the assembly object.
     */
    updateAssembly(): void;
    cleanup(): void;
}
export declare function testSnippetLocation(fileName: string): SnippetLocation;
export declare const DUMMY_JSII_CONFIG: {
    targets: {
        dotnet: {
            namespace: string;
            packageId: string;
        };
        go: {
            moduleName: string;
        };
        java: {
            maven: {
                groupId: string;
                artifactId: string;
            };
            package: string;
        };
        python: {
            distName: string;
            module: string;
        };
    };
};
export declare function withTemporaryDirectory<T>(callback: (dir: string) => Promise<T>): Promise<T>;
//# sourceMappingURL=testutil.d.ts.map