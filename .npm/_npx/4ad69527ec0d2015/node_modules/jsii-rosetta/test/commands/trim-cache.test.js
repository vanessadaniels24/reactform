"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const lib_1 = require("../../lib");
const extract_1 = require("../../lib/commands/extract");
const trim_cache_1 = require("../../lib/commands/trim-cache");
const testutil_1 = require("../testutil");
const DUMMY_README = `
  Here is an example of how to use ClassA:

  \`\`\`ts
  import * as ass from 'my_assembly';
  const aClass = new ass.ClassA();
  aClass.someMethod();
  \`\`\`
`;
let assembly;
beforeEach(() => {
    // Create an assembly in a temp directory
    assembly = testutil_1.TestJsiiModule.fromSource({
        'index.ts': `
      export class ClassA {
        public someMethod() {
        }
      }
      export class ClassB {
        public anotherMethod() {
        }
      }
      `,
        'README.md': DUMMY_README,
    }, {
        name: 'my_assembly',
        jsii: testutil_1.DUMMY_JSII_CONFIG,
    });
});
afterEach(() => assembly.cleanup());
test('trim-cache removes unused snippets', async () => {
    const cacheFile = path.join(assembly.moduleDirectory, 'dummy.tabl.json');
    // GIVEN
    const tbl = new lib_1.LanguageTablet();
    tbl.addSnippet(bogusTranslatedSnippet());
    await tbl.save(cacheFile);
    // WHEN
    await (0, trim_cache_1.trimCache)({
        assemblyLocations: [assembly.moduleDirectory],
        cacheFile,
    });
    // THEN
    const updated = await lib_1.LanguageTablet.fromFile(cacheFile);
    expect(updated.count).toEqual(0);
});
test('trim-cache leaves used snippets', async () => {
    const defaultTablet = path.join(assembly.moduleDirectory, lib_1.DEFAULT_TABLET_NAME);
    // GIVEN
    await (0, extract_1.extractSnippets)([assembly.moduleDirectory]);
    // WHEN
    await (0, trim_cache_1.trimCache)({
        assemblyLocations: [assembly.moduleDirectory],
        cacheFile: defaultTablet,
    });
    // THEN
    const updated = await lib_1.LanguageTablet.fromFile(defaultTablet);
    expect(updated.count).toEqual(1);
});
test('trim-cache preserves tablet compression', async () => {
    const compDefaultTablet = path.join(assembly.moduleDirectory, lib_1.DEFAULT_TABLET_NAME_COMPRESSED);
    // GIVEN
    const tbl = new lib_1.LanguageTablet();
    tbl.addSnippets(bogusTranslatedSnippet());
    // explicitly compress the tablet file
    await tbl.save(compDefaultTablet, true);
    // WHEN
    await (0, trim_cache_1.trimCache)({
        assemblyLocations: [assembly.moduleDirectory],
        cacheFile: compDefaultTablet,
    });
    // THEN
    const updated = await lib_1.LanguageTablet.fromFile(compDefaultTablet);
    expect(updated.compressedSource).toBeTruthy();
});
function bogusTranslatedSnippet() {
    return lib_1.TranslatedSnippet.fromTypeScript((0, lib_1.typeScriptSnippetFromVisibleSource)('console.log("hello");', (0, testutil_1.testSnippetLocation)('x.ts'), true), true);
}
//# sourceMappingURL=trim-cache.test.js.map