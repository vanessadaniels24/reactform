"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testutil_1 = require("./testutil");
let assembly;
beforeAll(() => {
    assembly = testutil_1.TestJsiiModule.fromSource(`
    export class ClassA {
      public someMethod() {
      }
    }
    export class ClassB {
      public argumentMethod(args: BeeArgs) {
        Array.isArray(args);
      }
    }
    export interface BeeArgs { readonly value: string; readonly nested?: NestedType; }
    export interface NestedType { readonly x: number; }
    `, {
        name: 'my_assembly',
        jsii: testutil_1.DUMMY_JSII_CONFIG,
    });
});
afterAll(() => assembly.cleanup());
test('generate syntax counter', () => {
    const translator = assembly.successfullyCompile(`
    import * as ass from 'my_assembly';
    const a = new ass.ClassA();
  `);
    expect(translator.syntaxKindCounter()).toEqual({
        10: 1,
        75: 4,
        194: 1,
        197: 1,
        225: 1,
        242: 1,
        243: 1,
        254: 1,
        255: 1,
        256: 1,
        290: 1, // SourceFile
    });
});
test('do not count syntax in hidden lines', () => {
    const translator = assembly.successfullyCompile(`
    /// !hide
    import * as ass from 'my_assembly';
    const a = new ass.ClassA();
    /// !show
    const b = new ass.ClassB();
  `);
    expect(translator.syntaxKindCounter()).toEqual({
        75: 3,
        194: 1,
        197: 1,
        225: 1,
        242: 1,
        243: 1, // VariableDeclarationList
    });
});
//# sourceMappingURL=syntax-counter.test.js.map