"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const o_tree_1 = require("../lib/o-tree");
test('test indentation', () => {
    const tree = new o_tree_1.OTree(['{'], ['\na', '\nb', '\nc'], {
        separator: ', ',
        indent: 4,
        suffix: '\n}',
    });
    expect((0, o_tree_1.renderTree)(tree)).toEqual('{\n    a,\n    b,\n    c\n}');
});
test('collapse subsequent unused indentation', () => {
    const tree = new o_tree_1.OTree(['{'], [new o_tree_1.OTree([], ['\na', '\nb', '\nc'], { indent: 4, separator: ', ' })], {
        separator: ', ',
        indent: 4,
        suffix: '\n}',
    });
    expect((0, o_tree_1.renderTree)(tree)).toEqual('{\n    a,\n    b,\n    c\n}');
});
test('don not collapse subsequent USED indentation', () => {
    const tree = new o_tree_1.OTree(['{'], [
        '\na',
        new o_tree_1.OTree(['\n{'], ['\na', '\nb', '\nc'], {
            indent: 4,
            separator: ', ',
            suffix: '\n}',
        }),
        '\nb',
    ], {
        separator: ', ',
        indent: 4,
        suffix: '\n}',
    });
    expect((0, o_tree_1.renderTree)(tree)).toEqual(['{', '    a,', '    {', '        a,', '        b,', '        c', '    },', '    b', '}'].join('\n'));
});
//# sourceMappingURL=otree.test.js.map